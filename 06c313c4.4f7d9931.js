(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{140:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return d}));var n=r(2),o=r(9),a=(r(0),r(163)),i={id:"providers",title:"Providers in Detail"},c={id:"providers",isDocsHomePage:!1,title:"Providers in Detail",description:"Model Provider",source:"@site/docs/providers.md",permalink:"/project-website-template/docs/providers",editUrl:"https://github.com/skylineprof/skyline/edit/master/website/docs/providers.md",sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/project-website-template/docs/getting-started"},next:{title:"Remote Projects",permalink:"/project-website-template/docs/remote"}},l=[{value:"Model Provider",id:"model-provider",children:[]},{value:"Input Provider",id:"input-provider",children:[]},{value:"Iteration Provider",id:"iteration-provider",children:[]}],p={rightToc:l};function d(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"model-provider"},"Model Provider"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def skyline_model_provider() -> torch.nn.Module:\n    pass\n")),Object(a.b)("p",null,"The model provider must take no arguments and return an instance of your model\n(a ",Object(a.b)("inlineCode",{parentName:"p"},"torch.nn.Module"),") that is on the GPU (i.e. you need to call ",Object(a.b)("inlineCode",{parentName:"p"},".cuda()")," on\nthe module before returning it)."),Object(a.b)("h3",{id:"input-provider"},"Input Provider"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def skyline_input_provider(batch_size: int = 32) -> Tuple:\n    pass\n")),Object(a.b)("p",null,"The input provider must take a single ",Object(a.b)("inlineCode",{parentName:"p"},"batch_size")," argument that has a default\nvalue (the batch size you want to profile with). It must return an iterable\n(does not ",Object(a.b)("em",{parentName:"p"},"have")," to be a ",Object(a.b)("inlineCode",{parentName:"p"},"tuple"),") that contains the arguments that you would\nnormally pass to your model's ",Object(a.b)("inlineCode",{parentName:"p"},"forward")," method. Any ",Object(a.b)("inlineCode",{parentName:"p"},"Tensor"),"s in the returned\niterable must be on the GPU (i.e. you need to call ",Object(a.b)("inlineCode",{parentName:"p"},".cuda()")," on them before\nreturning them)."),Object(a.b)("h3",{id:"iteration-provider"},"Iteration Provider"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def skyline_iteration_provider(model: torch.nn.Module) -> Callable:\n    pass\n")),Object(a.b)("p",null,"The iteration provider must take a single ",Object(a.b)("inlineCode",{parentName:"p"},"model")," argument, which will be an\ninstance of your model. This provider must return a callable (e.g., a function)\nthat, when invoked, runs a single training iteration."))}d.isMDXComponent=!0},163:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=o.a.createContext({}),d=function(e){var t=o.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=d(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(r),b=n,m=u["".concat(i,".").concat(b)]||u[b]||s[b]||a;return r?o.a.createElement(m,c(c({ref:t},p),{},{components:r})):o.a.createElement(m,c({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var p=2;p<a;p++)i[p]=r[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);